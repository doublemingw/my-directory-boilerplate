/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  comment?: string;
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | ({
    _key: string;
  } & Code)>;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type AppType = {
  _id: string;
  _type: "appType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocalizedString;
  slug?: Slug;
  order?: number;
  date?: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  order?: number;
  date?: string;
};

export type Guide = {
  _id: string;
  _type: "guide";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  excerpt?: string;
  link?: string;
  order?: number;
  date?: string;
};

export type Application = {
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "appType";
  }>;
  featured?: boolean;
  status?: "reviewing" | "rejected" | "approved";
  reason?: "rejected: please upload a better logo image" | "rejected: please upload a better cover image" | "rejected: this indie app seems not ready?" | "rejected: only support self-built indie app";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  date?: string;
};

export type Submission = {
  _id: string;
  _type: "submission";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  link?: string;
  status?: "reviewing" | "rejected" | "approved";
  reason?: "rejected: this product is not for indie hackers";
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  date?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  order?: number;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Paid" | "Free & Paid";
  source?: string;
  submitter?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  desc?: LocalizedString;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | ({
    _key: string;
  } & Code)>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "guide";
  }>;
  date?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  id?: string;
  email?: string;
  avatar?: string;
  link?: string;
  date?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocalizedString;
  slug?: Slug;
  group?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "group";
  };
  order?: number;
  date?: string;
};

export type Group = {
  _id: string;
  _type: "group";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: LocalizedString;
  slug?: Slug;
  order?: number;
  date?: string;
};

export type LocalizedString = {
  _type: "localizedString";
  en?: string;
  zh?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Markdown = string;

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};
export declare const internalGroqTypeReferenceTo: unique symbol;

// Source: sanity/lib/queries.ts
// Variable: productListQueryForSitemap
// Query: *[_type == "product" && visible == true] | order(order desc, _createdAt asc) {  _id,  "slug": slug.current,}
export type ProductListQueryForSitemapResult = Array<{
  _id: string;
  slug: string | null;
}>;
// Variable: categoryListQueryForSitemap
// Query: *[_type == "category"] | order(order desc, _createdAt asc) {  _id,    "slug": slug.current,  group-> {    _id,    "slug": slug.current,  },}
export type CategoryListQueryForSitemapResult = Array<{
  _id: string;
  slug: string | null;
  group: {
    _id: string;
    slug: string | null;
  } | null;
}>;
// Variable: appListQueryForSitemap
// Query: *[_type == "application" && status == "approved"] | order(order desc, _createdAt asc) {  _id,    name,}
export type AppListQueryForSitemapResult = Array<{
  _id: string;
  name: string | null;
}>;
// Variable: appTypeListQueryForSitemap
// Query: *[_type == "appType"] | order(order desc, _createdAt asc) {  _id,  "slug": slug.current,}
export type AppTypeListQueryForSitemapResult = Array<{
  _id: string;
  slug: string | null;
}>;
// Variable: categoryQuery
// Query: *[_type == "category" && slug.current == $slug] [0] {  _id,  "name": coalesce(name[$lang], name[$defaultLocale]),}
export type CategoryQueryResult = {
  _id: string;
  name: string;
} | null;
// Variable: appTypeQuery
// Query: *[_type == "appType" && slug.current == $slug] [0] {  _id,  "name": coalesce(name[$lang], name[$defaultLocale]),}
export type AppTypeQueryResult = {
  _id: string;
  name: string;
} | null;
// Variable: groupListQuery
// Query: *[_type == "group"] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  "categories": *[_type=='category' && references(^._id)] | order(order desc, _createdAt asc)  {     ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  }}
export type GroupListQueryResult = Array<{
  _id: string;
  _type: "group";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  order?: number;
  date?: string;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "group";
    };
    order?: number;
    date?: string;
  }>;
}>;
// Variable: groupQuery
// Query: *[_type == "group" && slug.current == $slug] [0] {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  "categories": *[_type=='category' && references(^._id)] | order(order desc, _createdAt asc)  {     ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  }}
export type GroupQueryResult = {
  _id: string;
  _type: "group";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  order?: number;
  date?: string;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "group";
    };
    order?: number;
    date?: string;
  }>;
} | null;
// Variable: groupListWithCategoryQuery
// Query: *[_type=="group"] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  "categories": *[_type=='category' && references(^._id)] | order(order desc, _createdAt asc)  {     ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  }}
export type GroupListWithCategoryQueryResult = Array<{
  _id: string;
  _type: "group";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  order?: number;
  date?: string;
  categories: Array<{
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "group";
    };
    order?: number;
    date?: string;
  }>;
}>;
// Variable: categoryListQuery
// Query: *[_type == "category"] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },}
export type CategoryListQueryResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  group: {
    _id: string;
    _type: "group";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  } | null;
  order?: number;
  date?: string;
}>;
// Variable: tagListQuery
// Query: *[_type == "tag"] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,}
export type TagListQueryResult = Array<{
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  date?: string;
}>;
// Variable: categoryListByGroupQuery
// Query: *[_type == "category" && references(*[_type == "group" && slug.current == $groupSlug]._id)] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },}
export type CategoryListByGroupQueryResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  group: {
    _id: string;
    _type: "group";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  } | null;
  order?: number;
  date?: string;
}>;
// Variable: productListByGroupQuery
// Query: *[_type == "product" && visible == true && category._ref in (*[_type == "category" && group._ref in (*[_type == "group" && slug.current == $groupSlug]._id)]._id)]  | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductListByGroupQueryResult = Array<never>;
// Variable: productListQuery
// Query: *[_type == "product" && visible == true] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductListQueryResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group: {
      _id: string;
      _type: "group";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string;
      slug: string | null;
      order?: number;
      date?: string;
    } | null;
    order?: number;
    date?: string;
  } | null;
  tags: Array<{
    _id: string;
    _type: "tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Free & Paid" | "Paid";
  source?: string;
  submitter: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  desc: string;
  content?: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides: Array<{
    _id: string;
    _type: "guide";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    excerpt?: string;
    link?: string;
    order?: number;
    date?: string;
  }> | null;
  date: string;
  status: "draft" | "published";
}>;
// Variable: productListOfFeaturedQuery
// Query: *[_type == "product" && visible == true && featured == true] | order(order desc, _createdAt asc) [0...$limit] {    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductListOfFeaturedQueryResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group: {
      _id: string;
      _type: "group";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string;
      slug: string | null;
      order?: number;
      date?: string;
    } | null;
    order?: number;
    date?: string;
  } | null;
  tags: Array<{
    _id: string;
    _type: "tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Free & Paid" | "Paid";
  source?: string;
  submitter: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  desc: string;
  content?: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides: Array<{
    _id: string;
    _type: "guide";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    excerpt?: string;
    link?: string;
    order?: number;
    date?: string;
  }> | null;
  date: string;
  status: "draft" | "published";
}>;
// Variable: productListByCategoryQuery
// Query: *[_type == "product" && visible == true && references(*[_type == "category" && slug.current == $categorySlug]._id)] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductListByCategoryQueryResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group: {
      _id: string;
      _type: "group";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string;
      slug: string | null;
      order?: number;
      date?: string;
    } | null;
    order?: number;
    date?: string;
  } | null;
  tags: Array<{
    _id: string;
    _type: "tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Free & Paid" | "Paid";
  source?: string;
  submitter: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  desc: string;
  content?: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides: Array<{
    _id: string;
    _type: "guide";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    excerpt?: string;
    link?: string;
    order?: number;
    date?: string;
  }> | null;
  date: string;
  status: "draft" | "published";
}>;
// Variable: productListOfRecentQuery
// Query: *[_type == "product" && visible == true] | order(_createdAt desc) [0...$limit] {    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductListOfRecentQueryResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group: {
      _id: string;
      _type: "group";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string;
      slug: string | null;
      order?: number;
      date?: string;
    } | null;
    order?: number;
    date?: string;
  } | null;
  tags: Array<{
    _id: string;
    _type: "tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Free & Paid" | "Paid";
  source?: string;
  submitter: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  desc: string;
  content?: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides: Array<{
    _id: string;
    _type: "guide";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    excerpt?: string;
    link?: string;
    order?: number;
    date?: string;
  }> | null;
  date: string;
  status: "draft" | "published";
}>;
// Variable: productQuery
// Query: *[_type == "product" && visible == true && slug.current == $slug] [0] {  content,    ...,  "slug": slug.current,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "desc": coalesce(desc[$lang], desc[$defaultLocale]),  "date": coalesce(date, _createdAt),  category-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  group-> {    ...,     "slug": slug.current,    "name": coalesce(name[$lang], name[$defaultLocale]),  },  },  tags[]-> {      ...,  "slug": slug.current,  },  guides[]-> {      ...,  "slug": slug.current,  },  submitter-> {      ...  },}
export type ProductQueryResult = {
  content?: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  order?: number;
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    group: {
      _id: string;
      _type: "group";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name: string;
      slug: string | null;
      order?: number;
      date?: string;
    } | null;
    order?: number;
    date?: string;
  } | null;
  tags: Array<{
    _id: string;
    _type: "tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  visible?: boolean;
  website?: string;
  github?: string;
  priceLink?: string;
  price?: "Free" | "Free & Paid" | "Paid";
  source?: string;
  submitter: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  desc: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  guides: Array<{
    _id: string;
    _type: "guide";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug: string | null;
    excerpt?: string;
    link?: string;
    order?: number;
    date?: string;
  }> | null;
  date: string;
  status: "draft" | "published";
} | null;
// Variable: appQuery
// Query: *[_type == "application" && name == $slug] [0] {    ...,  types[]-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),    },  user-> {      ...  },}
export type AppQueryResult = {
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types: Array<{
    _id: string;
    _type: "appType";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  status?: "approved" | "rejected" | "reviewing";
  reason?: "rejected: only support self-built indie app" | "rejected: please upload a better cover image" | "rejected: please upload a better logo image" | "rejected: this indie app seems not ready?";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  date?: string;
} | null;
// Variable: appTypeListQuery
// Query: *[_type == "appType"] | order(order desc, _createdAt asc) {    ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),  }
export type AppTypeListQueryResult = Array<{
  _id: string;
  _type: "appType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: string | null;
  order?: number;
  date?: string;
}>;
// Variable: applicationListOfFeaturedQuery
// Query: *[_type == "application" && status == "approved" && featured == true] | order(order desc, _createdAt asc) {    ...,  types[]-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),    },  user-> {      ...  },}
export type ApplicationListOfFeaturedQueryResult = Array<{
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types: Array<{
    _id: string;
    _type: "appType";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  status?: "approved" | "rejected" | "reviewing";
  reason?: "rejected: only support self-built indie app" | "rejected: please upload a better cover image" | "rejected: please upload a better logo image" | "rejected: this indie app seems not ready?";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  date?: string;
}>;
// Variable: applicationListOfRecentQuery
// Query: *[_type == "application" && status == "approved"] | order(_createdAt desc) [0...$limit] {    ...,  types[]-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),    },  user-> {      ...  },}
export type ApplicationListOfRecentQueryResult = Array<{
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types: Array<{
    _id: string;
    _type: "appType";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  status?: "approved" | "rejected" | "reviewing";
  reason?: "rejected: only support self-built indie app" | "rejected: please upload a better cover image" | "rejected: please upload a better logo image" | "rejected: this indie app seems not ready?";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  date?: string;
}>;
// Variable: applicationListByCategoryQuery
// Query: *[_type == "application" && status == "approved" && references(*[_type == "appType" && slug.current == $categorySlug]._id)] | order(order desc, _createdAt asc) {    ...,  types[]-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),    },  user-> {      ...  },}
export type ApplicationListByCategoryQueryResult = Array<{
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types: Array<{
    _id: string;
    _type: "appType";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  status?: "approved" | "rejected" | "reviewing";
  reason?: "rejected: only support self-built indie app" | "rejected: please upload a better cover image" | "rejected: please upload a better logo image" | "rejected: this indie app seems not ready?";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  date?: string;
}>;
// Variable: applicationListByUserQuery
// Query: *[_type == "application" && references(*[_type == "user" && id == $userid]._id)] | order(_createdAt asc) {    ...,  types[]-> {      ...,  "slug": slug.current,  "name": coalesce(name[$lang], name[$defaultLocale]),    },  user-> {      ...  },}
export type ApplicationListByUserQueryResult = Array<{
  _id: string;
  _type: "application";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  link?: string;
  types: Array<{
    _id: string;
    _type: "appType";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name: string;
    slug: string | null;
    order?: number;
    date?: string;
  }> | null;
  featured?: boolean;
  status?: "approved" | "rejected" | "reviewing";
  reason?: "rejected: only support self-built indie app" | "rejected: please upload a better cover image" | "rejected: please upload a better logo image" | "rejected: this indie app seems not ready?";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  cover?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  user: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    id?: string;
    email?: string;
    avatar?: string;
    link?: string;
    date?: string;
  } | null;
  date?: string;
}>;
// Variable: userQuery
// Query: *[_type == "user" && id == $userId][0] {    ...}
export type UserQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  id?: string;
  email?: string;
  avatar?: string;
  link?: string;
  date?: string;
} | null;
// Variable: moreStoriesQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {    _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},}
export type MoreStoriesQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {  content,    _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},}
export type PostQueryResult = {
  content: Array<({
    _key: string;
  } & Code) | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  } | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
} | null;
// Variable: heroQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},}
export type HeroQueryResult = {
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;

// Source: app/(blog)/posts/[slug]/page.tsx
// Variable: postSlugs
// Query: *[_type == "post"]{slug}
export type PostSlugsResult = Array<{
  slug: Slug | null;
}>;

